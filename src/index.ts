import { app, BrowserWindow, protocol, Menu, BrowserView, getCurrentWindow, ipcMain, dialog } from 'electron';
import fetch from 'electron-fetch';
import spawn from 'child_process';
spawn.exec('kubectl --namespace=prometheus port-forward deploy/prometheus-server 9090', (err, stdout, stderr) => {
  if(err) {
    console.log('spawn error: ', err);
    return;
  }
  console.log('port forward stdout: ', stdout);
})
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const fetchCronJobs = async () => {
  console.log('fetchCronJobs');
  const newCronjobs: object = {};
  try {
    const response = await (await fetch("http://localhost:9090/api/v1/label/cronjob/values")).json();
    for(let i = 0; i < response.data.length; i++) {
      const name: string = response.data[i];
      const cronjobOverview = (await (await fetch(`http://localhost:9090/api/v1/query?query={cronjob="${name}"}`)).json()).data.result;
      if(cronjobOverview.length !== 0) {      
        if(!newCronjobs[name]) newCronjobs[name] = {};
        cronjobOverview.forEach((metricObj: any): void => {
          newCronjobs[name][metricObj.metric.__name__] = metricObj.value[1];
        });
        const allCronjobInstances = (await (await fetch(`http://localhost:9090/api/v1/query?query={job_name=~"${name}-.*"}`)).json()).data.result;
        const groupedMetricsByInstance: any = {};
        allCronjobInstances.forEach(instance => {
          const { __name__, job_name } = instance.metric;
          const value = instance.value[1];
          if(!groupedMetricsByInstance[job_name]) groupedMetricsByInstance[job_name] = {};
          groupedMetricsByInstance[job_name][__name__] = value;
        })

        newCronjobs[name].node = cronjobOverview[0].metric.node;
        newCronjobs[name].instances = groupedMetricsByInstance;
        newCronjobs[name].interval = (newCronjobs[name].kube_cronjob_next_schedule_time - newCronjobs[name].kube_cronjob_status_last_schedule_time)/60;
      }
    }
    return newCronjobs;
  } catch (e) {
    console.log(e);
  }
}

let currentlyFetching = false;
const fetchingPastJobs = async (e, jobs, time) => {
  if(currentlyFetching) return;
  currentlyFetching = true;
  console.log('fetchingPastJobs');
  const jobMetrics = ['kube_job_complete', 'kube_job_created', 'kube_job_status_active', 'kube_job_status_completion_time', 'kube_job_status_failed', 'kube_job_status_start_time', 'kube_job_status_succeeded'];
  const result = [];
  console.log('l: ', jobs.length);
  for (let i = 0; i < jobs.length; i++) {
    console.log(i);
    try {
      const pJO = {}
      const response = await (await fetch(`http://localhost:9090/api/v1/query?query={job_name="${jobs[i]}"}[${time}]`)).json();
      if (response.data.result.length > 0) {
        // console.log('test: ', response.data.result)
        response.data.result.forEach(metricObj => {
          if (jobMetrics.includes(metricObj.metric.__name__)) {
            if (!pJO['kube_job_namespace']) pJO['kube_job_namespace'] = metricObj.metric.namespace;
            if (metricObj.metric.__name__ === 'kube_job_complete' && metricObj.metric.condition === 'true'|| 
              metricObj.metric.__name__ === 'kube_job_status_failed' || 
              metricObj.metric.__name__ === 'kube_job_status_active' || 
              metricObj.metric.__name__ === 'kube_job_status_succeeded') {
              if (metricObj.values[metricObj.values.length - 1][1] === '1') {
                pJO[metricObj.metric.__name__] = true;
              } else pJO[metricObj.metric.__name__] = false;
            } else if (metricObj.metric.__name__ === 'kube_job_created' || 
              metricObj.metric.__name__ === 'kube_job_status_completion_time' || 
              metricObj.metric.__name__ === 'kube_job_status_start_time') {
                pJO[metricObj.metric.__name__] = new Date((metricObj.values[metricObj.values.length - 1][1]) * 1000);
            } 
          }
          pJO['kube_job_runtime'] = (pJO['kube_job_status_completion_time'] - pJO['kube_job_status_start_time'])
        });
        pJO.kube_name = jobs[i];
        // setHistory(oldHistory => [...oldHistory, pJO]);
        result.push(pJO);
        // setPastJobsObject(pastJobsObject[jobs[i]] = pJO);
      }
    } catch (err) { console.log('fetchingPastJobs error: ', err); }
  }
  currentlyFetching = false;
  return result;
};

const submitJob = async (e, text) => {
  console.log('submitting job');
  console.log('text: ', text);
  spawn.execSync(`echo '${text}' > test.yaml`);
  spawn.execSync(`kubectl apply -f test.yaml`);
  
}
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  ipcMain.handle('fetchCronJobs', fetchCronJobs);
  ipcMain.handle('fetchingPastJobs', fetchingPastJobs);
  ipcMain.handle('submitJob', submitJob);
  loadApp();
  createWindow()
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    console.log('windows closed');
    spawn.execSync('npx kill-port 9090');
    app.quit();
  }
  else {
    console.log('killing port on mac')
    spawn.execSync('lsof -i tcp:9090');
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});



// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const loadApp = () => {
  let template = [
    { label: "PROTEUS", 
      submenu: [
        { label: 'about proteus', click() { require('electron').shell.openExternal(`https://github.com/oslabs-beta/proteus`); }}, 
        { type: 'separator' },
        { role: 'quit' },
      ]
    }, {
      label: 'File',
      submenu: [
        { label: 'Check for updates', click() { require('electron').shell.openExternal(`https://github.com/oslabs-beta/proteus`); }},
        { type: 'separator' },
        { label: 'Close window', click() {app.quit()} }
      ]
    }, {
      label: "Edit", 
      submenu: [
        { role: 'reload' },
        { type: 'separator' },
        { role: 'toggleDevTools' }
      ]
    }, {
      label: "View", 
      submenu: [
        { role: 'minimize' },
        { role: 'togglefullscreen' },
        { type: 'separator' },
        { role: 'zoomIn' },
        { role: 'zoomOut' },
        { role: 'resetZoom' }
      ]
    }, 
  ]
  const menu = Menu.buildFromTemplate(template)
  Menu.setApplicationMenu(menu)
}