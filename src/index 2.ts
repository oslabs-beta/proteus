import { app, BrowserWindow, protocol, Menu, BrowserView, getCurrentWindow, ipcMain, dialog } from 'electron';
import spawn from 'child_process';
import mongoose from 'mongoose';
require('dotenv').config();

const ArchivedJobs = require('./Models/ArchivedJobsModel');
const CronjobModel = require('./Models/CronjobModel');

mongoose.connect(process.env.DB_URI, {useNewUrlParser: true, useUnifiedTopology: true});
mongoose.connection.once('open', () => {
    console.log('MongoDB database connection established successfully');
});

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// NEED TO CHECK THE TYPE OF RETURNED PROPERTY VALUES
const fetchAllJobs = async () =>  await ArchivedJobs.find().lean();

const fetchCronJobs = async () => await CronjobModel.find().lean();

const submitJob = async (e, text) => {
  console.log('submitting job');
  console.log('text: ', text);
  spawn.execSync(`echo '${text}' > test.yaml`);
  spawn.execSync(`kubectl apply -f test.yaml`);
  
}
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  ipcMain.handle('fetchCronJobs', fetchCronJobs);
  ipcMain.handle('submitJob', submitJob);
  ipcMain.handle('fetchAllJobs', fetchAllJobs);
  loadApp();
  createWindow()
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});



// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const loadApp = () => {
  let template = [
    { label: "PROTEUS", 
      submenu: [
        { label: 'About Proteus', click() { require('electron').shell.openExternal(`https://www.proteus-osp.app`); }}, 
        { label: 'Get Proteus image', click() { require('electron').shell.openExternal(`https://hub.docker.com/r/ospproteus/proteus-image`); }}, 
        { type: 'separator' },
        { role: 'quit' },
      ]
    }, {
      label: 'File',
      submenu: [
        { label: 'Check for updates', click() { require('electron').shell.openExternal(`https://github.com/oslabs-beta/proteus`); }},
        { type: 'separator' },
        { label: 'Close window', click() {app.quit()} }
      ]
    }, {
      label: "Edit", 
      submenu: [
        { role: 'reload' },
        { type: 'separator' },
        { role: 'toggleDevTools' }
      ]
    }, {
      label: "View", 
      submenu: [
        { role: 'minimize' },
        { role: 'togglefullscreen' },
        { type: 'separator' },
        { role: 'zoomIn' },
        { role: 'zoomOut' },
        { role: 'resetZoom' }
      ]
    }, 
  ]
  const menu = Menu.buildFromTemplate(template)
  Menu.setApplicationMenu(menu)
}